<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Model</title>
      <link href="2020/09/14/model/"/>
      <url>2020/09/14/model/</url>
      
        <content type="html"><![CDATA[<h1 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h1><p>模型是一个定义数据源的数据，它包含要存储数据的一些属性和行为。通常，每一个模型对应数据库中的一个数据表。</p><ul><li>每一个模型是django.db.models.Model的子类</li><li>每一个模型属性代表数据表的一个字段。</li><li>Django提供了自动生成的数据库访问API，使用模型操作数据库很方便</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ORM</title>
      <link href="2020/09/14/ORM/"/>
      <url>2020/09/14/ORM/</url>
      
        <content type="html"><![CDATA[<h1 id="ORMs"><a href="#ORMs" class="headerlink" title="ORMs"></a>ORMs</h1><p>ORM，O指对象、R指关系、M指映射Mapping和模型Model；</p><p>对象关系映射，对象和关系之间的映射，使用面向对象的方式来操作数据库</p><p>ORM是封装在pymysq1上层的文件。他的作用是把py thon语句转换成sq1语句，从而去数据库里操作数据。<br>从数据库里获得的数据，经过orm转换为对象，对象可以直接调用属性获得值。orm本质是个中转站。</p><p>orm能干的事：<br>   1 创建表，修改表，删除表<br>   2 插入数据<br>   3 修改数据<br>   4 删除数据</p><p>ORM图解</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%90%91/ORM%E5%9B%BE%E8%A7%A3.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue单元测试</title>
      <link href="2020/09/14/Vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>2020/09/14/Vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue单元测试"><a href="#Vue单元测试" class="headerlink" title="Vue单元测试"></a>Vue单元测试</h1><p>断言库</p><p>所谓”断言”， 就是判断源码的实际执行结果与预期结果是否一致,如果不一致就抛出一个错误。下面这句断言的意思是,调用add(1, 1) ,结果应该等于2。</p><pre class=" language-js"><code class="language-js">ivar expect <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'chai'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>expect<span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="单元测试是什么"><a href="#单元测试是什么" class="headerlink" title="单元测试是什么"></a>单元测试是什么</h2><p>维基百科：单元测试是针对 <strong>程序的最小单元</strong> 来进行正确性检验的测试工作。程序单元是应用的最小可测试部件。一个单元可能是<strong>单个程序、类、对象、方法</strong>等。<br> 通俗百科：单元测试，是为了测试某一个类的某一个方法能否正常工作，而写的测试代码。</p><h3 id="单元测试的意义"><a href="#单元测试的意义" class="headerlink" title="单元测试的意义"></a>单元测试的意义</h3><p>减少bug、提高代码质量、快速定位bug、减少调试时间、放心重构。</p><h3 id="单元测试的目的"><a href="#单元测试的目的" class="headerlink" title="单元测试的目的"></a>单元测试的目的</h3><p>当你的项目足够大的时候，在叠加模块和组件的过程中，是很有可能影响之前的模块。但是被影响的模块已经通过了测试，我们在迭代的时候，很少有测试人员会去重新测试这个系统。所以， 被影响的模块很可能就有了一个隐形的bug被部署到线上。因此我们采用自动化测试。最主要的作用是对于大型项目，在每次迭代的时候， 可以保证整个系统的正确运行， 确保系统的健壮。</p><h2 id="当前vue框架的选择"><a href="#当前vue框架的选择" class="headerlink" title="当前vue框架的选择"></a>当前vue框架的选择</h2><p>vue官方推荐一个叫做karma的自动化测试，它产生一个 Web 服务环境来运行项目代码，并且执行测试，该工具在Vue中的主要作用是将项目运行在各种主流Web浏览器进行测试。换句话说，它是一个测试工具，能让你的代码在浏览器环境下测试。</p><p>vue的初始化</p><p>1.在Node环境下安装Vue-CLI</p><pre class=" language-shell"><code class="language-shell">npm install -g vue-cli </code></pre><p>2.通过Vue-CLI初始化项目文件,命令如下</p><pre class=" language-shell"><code class="language-shell">vue init webpack testtodo</code></pre><p><img src="/images/Vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/1.png"></p><p>3.进入文件夹testtodo输入以下命令开启服务器</p><pre class=" language-shell"><code class="language-shell">npm run dev</code></pre><p>4.我们先创建一个名为”List.vue”‘在”src/components”文件夹中，并将以下代码放入其中:</p><p>src/components/List.vue</p><pre class=" language-vue"><code class="language-vue"><template>  <div>    <h1>My To Do List</h1>    <!--displays list -->    <ul>      <li v-for="item in listItems" :key=item>{{ item }}</li>    </ul>  </div></template><script>export default {  name: 'list',  data () {    return {      listItems: ['buy food', 'play games', 'sleep'],    }  }}</script></code></pre><p>在组件中，列表项存储在组件数据中的数组中。然后模板可以访问这些数据，这些数据在foreach循环(v-for)中循环，并显示在页面上。</p><p>下面创建一个新路由来显示组件。进入src/router/index.js并添加一个路由:</p><p>src/router/index.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'@/components/HelloWorld'</span><span class="token keyword">import</span> List <span class="token keyword">from</span> <span class="token string">'@/components/List'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> HelloWorld    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/todo'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'ToDo'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> List    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>现在，打开  localhost:8080/#/todo，就可以将看到列表</p><p><img src="/images/Vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/2.png"></p><p>首先，我们要测试数据是否正确显示。在test/unit/specs中，创建一个新的文件List.spec.js，并写入以下代码</p><p>test/unit/specs/List.spec.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> List <span class="token keyword">from</span> <span class="token string">'@/components/List'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'List.vue'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'displays items from the list'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// build component</span>      <span class="token keyword">const</span> Constructor <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> ListComponent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在这个文件中，我们描述了这个 list.vue 组件，我们有一个空的测试，它将检查它(组件)是否显示列表中的项。这是Mocha测试的基本文件结构。</p><p>在我们的测试中，首先需要设置Vue组件，写入以下代码</p><p>扩展Vue，然后挂载组件。挂载组件很重要，因为这是在模板中呈现HTML的部分。这本质上意味着HTML被构建，模板中的变量(e.g.)被填充数据，使我们以后能够访问HTML ( 通过 $el)。</p><p>准备好组件后，就可以编写第一个断言了。我们使用了Chai断言库提供的“expect”样式以及“should”和“assert”。挂载组件后写入以下代码：</p><p>test/unit/specs/List.spec.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// assert that component text contains items from the list</span><span class="token function">expect</span><span class="token punctuation">(</span>ListComponent<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">contain</span><span class="token punctuation">(</span><span class="token string">'play games'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/images/Vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/4.png"></p><p>前面说过，我们可以使用ListComponent.$el获取组件的HTML。如果只访问内部的HTML，则使用ListComponent.$el.textContent。断言检查文本是否包含组件数据中设置的列表项之一。在这个例子里就是检查是否包含’play games’这个数据</p><p>要检查一切是否正常工作，我们可以运行测试，在vue-cli项目中我们可以在命令行输入</p><pre class=" language-shell"><code class="language-shell">npm run unit</code></pre><p>进行测试</p><p><img src="/images/Vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/5.png"></p><p>如果所有测试都通过了，它将显示绿色，并带有成功测试的列表和代码覆盖率报告，让我们知道在测试期间执行的应用程序代码的百分比。</p><p>但是如果这个时候我们把’play games’进行修改</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// assert that component text contains items from the list</span><span class="token function">expect</span><span class="token punctuation">(</span>ListComponent<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">contain</span><span class="token punctuation">(</span><span class="token string">'study'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后再次进行测试</p><p>我们就可以很清楚的看到出现了错误</p><p><img src="/images/Vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/6.png"></p><p>下面我们再来模拟用户输入</p><p>我们添加的一个是让用户能够向他们的列表中添加新项的功能。为此，我们需要一个输入框，用户可以在其中键入新项目，以及一个按钮，在单击时将项目添加到列表中。这是List.vue的更新版本:</p><p>src/components/List.vue</p><pre class=" language-vue"><code class="language-vue"><template>  <div>    <h1>My To Do List</h1>    <input v-model="newItem" >    <button @click="addItemToList">Add</button>    <!-- displays list -->     <ul>      <li v-for="item in listItems" :key=item>{{ item }}</li>    </ul>  </div></template><script>export default {  name: 'test',  data () {    return {      listItems: ['buy food', 'play games', 'sleep'],      newItem: ''    }  },  methods: {      addItemToList() {        this.listItems.push(this.newItem);        this.newItem = '';      }  }}</script></code></pre><p>使用v-model，输入框的值被绑定到存储在组件数据中的 newItem 变量。当单击该按钮时，将执行函数addItemToList，该函数将newItem添加到列表数组并清除newItem，以便可以向列表添加更多内容。</p><p>现在我们如果想要测试添加的功能是否正常运作，就在List.spec.js中创建一个新的空测试并添加测试代码:</p><p>test/unit/specs/List.spec.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'adds a new item to list on click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// our test goes here</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>首先，我们需要构建组件并模拟用户在输入框中输入内容。由于VueJS将输入框的值绑定到newItem变量，我们可以简单地将值设置为newItem。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// build component</span><span class="token keyword">const</span> Constructor <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ListComponent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// set value of new item</span>ListComponent<span class="token punctuation">.</span>newItem <span class="token operator">=</span> <span class="token string">'brush my teeth'</span><span class="token punctuation">;</span></code></pre><p>接下来，我们需要单击按钮。我们必须在HTML中找到这个按钮，它可以在 $el 中使用。只有这一次我们可以使用querySelector来查找实际的元素。可以使用元素的类(. buttonclass)、id (#buttonId)或元素的名称(button)来查找元素。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// find button</span><span class="token keyword">const</span> button <span class="token operator">=</span> ListComponent<span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为了模拟单击，我们需要向按钮传递一个新的要分派的事件对象。在测试环境中，List组件不会监听任何事件，因此我们需要手动运行监视程序。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// simulate click event</span><span class="token keyword">const</span> clickEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>Event</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>clickEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>ListComponent<span class="token punctuation">.</span>_watcher<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最后，我们需要检查是否显示了newItem，我们可能还需要检查newItem是否存储在列表数组中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//assert list contains new item</span><span class="token function">expect</span><span class="token punctuation">(</span>ListComponent<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">contain</span><span class="token punctuation">(</span><span class="token string">'brush my teeth'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span>ListComponent<span class="token punctuation">.</span>listItems<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">contain</span><span class="token punctuation">(</span><span class="token string">'brush my teeth'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/images/Vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/7.png"></p><p>现在我们可以再次运行我们的测试</p><pre><code>npm run unit</code></pre><p>可以看到已经成功通过测试</p><p><img src="/images/Vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/8.png"></p><p>以上就是介绍的两种简单的测试方法</p><h2 id="测试键盘"><a href="#测试键盘" class="headerlink" title="测试键盘"></a>测试键盘</h2><p>src/components/List.vue</p><pre class=" language-vue"><code class="language-vue"><template>  <input type="text" @keydown.prevent="onKeydown" v-model="quantity" /></template><script>  const KEY_DOWN = 40  const KEY_UP = 38  const ESCAPE = 27  export default {    data() {      return {        quantity: 0      }    },    methods: {      increment() {        this.quantity += 1      },      decrement() {        this.quantity -= 1      },      clear() {        this.quantity = 0      },      onKeydown(e) {        if (e.keyCode === ESCAPE) {          this.clear()        }        if (e.keyCode === KEY_DOWN) {          this.decrement()        }        if (e.keyCode === KEY_UP) {          this.increment()        }        if (e.key === 'a') {          this.quantity = 13        }      }    },    watch: {      quantity: function(newValue) {        this.$emit('input', newValue)      }    }  }</script></code></pre><p>test/unit/specs/List.spec.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> keyboard <span class="token keyword">from</span> <span class="token string">'@/components/keyboard'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@vue/test-utils'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'chai'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Key event tests'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Quantity is zero by default'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>keyboard<span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Up arrow key increments quantity by 1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>keyboard<span class="token punctuation">)</span>    wrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'keydown.up'</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Down arrow key decrements quantity by 1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>keyboard<span class="token punctuation">)</span>    wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">5</span>    wrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'keydown.down'</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Escape sets quantity to 0'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>keyboard<span class="token punctuation">)</span>    wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>quantity <span class="token operator">=</span> <span class="token number">5</span>    wrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'keydown.esc'</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Magic character "a" sets quantity to 13'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token function">mount</span><span class="token punctuation">(</span>keyboard<span class="token punctuation">)</span>    wrapper<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'keydown'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      key<span class="token punctuation">:</span> <span class="token string">'a'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>quantity<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="组件有异步操作"><a href="#组件有异步操作" class="headerlink" title="组件有异步操作"></a>组件有异步操作</h2><p>src/components/List.vue</p><pre class=" language-vue"><code class="language-vue"><template>  <span>{{ msg }}</span></template><script>  export default {    data () {      return {        msg: 'hello world'      }    }  }</script></code></pre><p>test/unit/specs/List.spec.js</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* eslint-disable */</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">'@/components/MyComponent'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'MyComponent'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 组件实例</span>  <span class="token keyword">const</span> Constructor <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 挂载组件</span>  <span class="token keyword">const</span> myComponent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 检查msg</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'msg should in page'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    myComponent<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'bye bye'</span>    <span class="token comment" spellcheck="true">// 需要等待更新</span>    Vue<span class="token punctuation">.</span><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">expect</span><span class="token punctuation">(</span>myComponent<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">contain</span><span class="token punctuation">(</span><span class="token string">'bye bye'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="测试异步更新"><a href="#测试异步更新" class="headerlink" title="测试异步更新"></a>测试异步更新</h2><p>src/components/List.vue</p><pre class=" language-vue"><code class="language-vue"><template>  <div>    <h3>Counter.vue</h3>    {{ count }}    <button @click="increment">自增</button>    <button @click="incrementByAsync">异步自增</button>  </div></template><script>  export default {    data () {      return {        count: 0      }    },    methods: {      increment () {        this.count++      },      incrementByAsync () {        window.setTimeout(() => {          this.count++;        }, 1000)       }    }  }</script></code></pre><p>test/unit/specs/List.spec.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'chai'</span><span class="token comment" spellcheck="true">//MyComponent.spec.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">'@/components/MyComponent'</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'MyComponent.vue'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'点击按钮后, count的值应该为1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取组件实例</span>    <span class="token keyword">const</span> Constructor <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>MyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//挂载组件</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取button</span>    <span class="token keyword">const</span> button <span class="token operator">=</span> vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新建点击事件</span>    <span class="token keyword">const</span> clickEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>Event</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//触发点击事件</span>    button<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>clickEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//监听点击事件</span>    vm<span class="token punctuation">.</span>_watcher<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 断言:count的值应该是数字1</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.num'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>Chai是一种断言库(<a href="http://chaijs.com/">http://chaijs.com/</a>)<br>所有的测试用例( it块)都应该含有一句或多句的断言。它是编写测试用例的关键。断言功能由断言库来实现。</p><h2 id="Chai的基本使用："><a href="#Chai的基本使用：" class="headerlink" title="Chai的基本使用："></a>Chai的基本使用：</h2><pre class=" language-js"><code class="language-js"><span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//判断4+5等于9 true</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//判断4+5不等于10 true</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> bar<span class="token punctuation">:</span> <span class="token string">'baz'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>deep<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token punctuation">{</span> bar<span class="token punctuation">:</span> <span class="token string">'baz'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//深度判断是否相等</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span>ok<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//判断是true</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>not<span class="token punctuation">.</span>be<span class="token punctuation">.</span>ok<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//判断是false</span><span class="token comment" spellcheck="true">//判断类型</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">'test").to.be.a('</span>string"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token string">'bar'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">an</span><span class="token punctuation">(</span>'object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断是否包含</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="关于类型判断"><a href="#关于类型判断" class="headerlink" title="关于类型判断"></a>关于类型判断</h2><p>我们可以对js中各种数据类型进行判断，包括常见的数字，字符串，布尔值，对象，数组，函数及ES6新增的数据类型。</p><pre class=" language-js"><code class="language-js">    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">'boolean'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">'number'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">'null'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">'undefined'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">'array'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>cos<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token regex">/123/</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>be<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token string">'regexp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="关于严格相等"><a href="#关于严格相等" class="headerlink" title="关于严格相等"></a>关于严格相等</h2><p>对于基本类型的数据，我们使用<code>equal</code>方法来判断是否相等，对于引用类型的数据，我们有两种方法来判断是否相等。一是使用<code>eql</code>来判断是否相等，二是在<code>equal</code>前加上<code>deep</code>即可。</p><pre class=" language-js"><code class="language-js">    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eql</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">eql</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>deep<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="关于长度"><a href="#关于长度" class="headerlink" title="关于长度"></a>关于长度</h2><pre class=" language-js"><code class="language-js">    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">lengthOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">lengthOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">lengthOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">lengthOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="关于包含"><a href="#关于包含" class="headerlink" title="关于包含"></a>关于包含</h2><pre class=" language-js"><code class="language-js">    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">'foobar'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">'foobar'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^foo/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">.</span>have<span class="token punctuation">.</span>any<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python社区搭建</title>
      <link href="2020/09/13/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/"/>
      <url>2020/09/13/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="python社区搭建"><a href="#python社区搭建" class="headerlink" title="python社区搭建"></a>python社区搭建</h1><hr><p>在开始之前，我们先来了解一下python是什么</p><p>Python是一种跨平台程序设计语言。 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。它最初被设计用于编写自动化脚本，随着版本的不断更新和语言新功能的添加，越多被用于独立的、大型项目的开发。</p><p>任何语言，从代码编写，再到执行代码程序，最后电脑执行。都必须要经过编译，把代码编译成计算机可以读懂的语言。可以把这种代码编译成计算机可以读懂的语言的工具，分为两种，一种是编译器，另外一种则是解释器。</p><p>编译型语言，一次性编译全部代码，再到电脑可以操作的执行文件。不同的操作系统下编译的系统，只能在不同的操作系统下运行。</p><p>解释型语言，不是一次行编译全部的代码，而是逐行解释每一句代码，编译一句执行一句。另外比如你在windows下执行，那么就下载windows的解释器。不同的操作系统，下载不同的解释器就可以了。</p><p>编译型语言和解释型语言相比，编译型语言就会更加快些。一次编译就可以。而解释型语言需要逐一执行解释代码，并且还要记录下一行的命令的行数指令。</p><p>Python虚拟环境的是为了给不同的工程创建互相独立的运行环境。在虚拟环境下，每一个工程都有自己的依赖包，而与其它的工程无关。不同的虚拟环境中同一个包可以有不同的版本。并且，虚拟环境的数量没有限制。</p><h2 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h2><p>推荐官网下载  <a href="https://www.python.org/getit/">https://www.python.org/getit/</a></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85python1.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85python2.png"></p><p><em>注意这里一定要勾选 <strong>Add Python 3.8 to PATH</strong>,这里会自动给你配置好环境变量</em></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85python3.png"></p><p><em>pip 是一个现代的，通用的 <a href="https://baike.baidu.com/item/Python">Python</a> 包管理工具。提供了对 Python 包的查找、下载、安装、卸载的功能。</em></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85python4.png"></p><p><em>选择自己想要存储的文件夹，点击Install</em></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85python5.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85python6.png"></p><p><em>安装完成</em></p><hr><ul><li>测试python是否安装成功</li></ul><p>​        Windows键+R，输入cmd 回车，启动命令提示符</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6.png"></p><p>输入python 回车</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E6%B5%8B%E8%AF%95python%E7%89%88%E6%9C%AC.png"></p><p>在这里我们看到了python的版本号后，就表示python已安装成功</p><hr><h2 id="配置python的编程环境"><a href="#配置python的编程环境" class="headerlink" title="配置python的编程环境"></a>配置python的编程环境</h2><p>在这里推荐两款编译器  </p><h3 id="1-sublime-text3"><a href="#1-sublime-text3" class="headerlink" title="1.sublime text3"></a>1.sublime text3</h3><p>下载地址 <a href="http://www.sublimetext.com/3">http://www.sublimetext.com/3</a></p><p><img src="/images/sublime%E4%B8%8B%E8%BD%BD.png"></p><p>这里可以选择适合你电脑的操作系统的安装包</p><p><img src="/images/sublime%E5%AE%89%E8%A3%851.png"></p><p><img src="/images/sublime%E5%AE%89%E8%A3%852.png"></p><p><img src="/images/sublime%E5%AE%89%E8%A3%853.png"></p><p>安装完成</p><hr><h3 id="2-pycharm"><a href="#2-pycharm" class="headerlink" title="2.pycharm"></a>2.pycharm</h3><p>​       下载地址<a href="https://www.jetbrains.com/pycharm/download/#section=windows">https://www.jetbrains.com/pycharm/download/#section=windows</a></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E4%B8%8B%E8%BD%BDpycharm.png"></p><p>注意，这里我们要选择community社区版本下载，这个版本是开源且免费的</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85pycharm2.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85pycharm3.png"></p><p>这里根据你的需求自行勾选</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85pycharm4.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85pycharm5.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85pycharm6.png"></p><p>安装完成</p><hr><h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><p><em>在命令提示符中我们使用  cd+空格+xxx（文件夹名）就可以进入该文件夹，如要进入多层文件夹，则用 “ \ ” 隔开</em></p><p>在cmd中输入以下命令</p><p>python -m venv venv</p><p><em>（第一个venv是包名，第二个是创建虚环境名字）</em></p><p><em>（注意，这个时候创建的文件夹venv就在当前文件下，为了方便这里我将虚拟环境建立在桌面上）</em></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83.png"> </p><h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><p>进入文件夹Scripts</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E6%BF%80%E6%B4%BB%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%831.png"> </p><p>输入命令 activate</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E6%BF%80%E6%B4%BB%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%832.png"> </p><p>我们可以看到前面多出了（venv），表示已经激活了虚拟环境</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E6%BF%80%E6%B4%BB%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%833.png"> </p><h3 id="检查pip版本"><a href="#检查pip版本" class="headerlink" title="检查pip版本"></a>检查pip版本</h3><p>在命令提示符中输入 pip -V <em>（这里注意V是大写）</em></p><pre class=" language-python"><code class="language-python">pip <span class="token operator">-</span>V</code></pre><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E6%A3%80%E6%9F%A5pip%E7%89%88%E6%9C%AC.png"></p><p>如果你的pip 不是这个版本，则需要进行 pip 的升级</p><ul><li>在升级之前我们需要更换pip源</li></ul><p>​       pip原来的下载源来自国外，所以下载速率非常慢，这个时候我们就要换成国内的源来提高下载速度</p><p>​       这里我们推荐阿里云的源，输入以下命令</p><pre class=" language-python"><code class="language-python">pip config set <span class="token keyword">global</span><span class="token punctuation">.</span>index<span class="token operator">-</span>url https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>pypi<span class="token operator">/</span>simple</code></pre><p><img src="/images/pip%E6%8D%A2%E6%BA%90.png">    </p><p> 这样就更换成功了</p><p>此时输入以下命令 来更新你的pip</p><pre><code>python -m pip install -U pip</code></pre><p><img src="/images/pip%E5%8D%87%E7%BA%A7.png"></p><p>这里看到Successfully installed pip-20.0.2就表示更新成功了</p><h3 id="使用pip安装django"><a href="#使用pip安装django" class="headerlink" title="使用pip安装django"></a>使用pip安装django</h3><p>输入以下命令</p><pre class=" language-python"><code class="language-python">pip install django</code></pre><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85django.png"></p><p>看到<em>Successfully installed asgiref-3.2.7 django-3.0.5 pytz-2019.3 sqlparse-0.3.1</em></p><p>这里表示django已经安装成功了</p><hr><h2 id="编写你的第一个Django应用"><a href="#编写你的第一个Django应用" class="headerlink" title="编写你的第一个Django应用"></a>编写你的第一个Django应用</h2><p>打开命令行，首先cd 到一个你想放置你代码的目录，然后执行以下命令</p><pre><code>django-admin startproject mysite</code></pre><p>这个时候我们就能在你选择的这个目录下看到一个新建文档 mysite</p><p><img src="/images/mysite%E6%96%87%E6%A1%A3.png"></p><p>现在来确认一下你的 Django 项目是否真的创建成功</p><p>注意，这里我们需要在命令行中cd 到<strong>外mysite</strong>目录 </p><p>（这里我创建在桌面上）</p><p>先执行</p><pre class=" language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py migrate</code></pre><p>然后执行下面的命令</p><pre class=" language-python"><code class="language-python">py manage<span class="token punctuation">.</span>py runserver</code></pre><p>现在，服务器正在运行，浏览器访问<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a></p><p>你应该会看到以下画面</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/%E5%B0%8F%E7%81%AB%E7%AE%AD.png"></p><p>现在你的开发环境已经配置好了</p><h2 id="To-do-list"><a href="#To-do-list" class="headerlink" title="To do list"></a>To do list</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>在这个教程中，我们将在你的 manage.py 同级目录下创建to do list。这样它就可以作为顶级模块导入，而不是to_do_list 的子模块。</p><p>用之前我们讲过的方法先建立一个你想放to_do_list的代码的目录</p><p>现在确定你现在处于 manage.py 所在的目录下（确保已经激活虚拟环境），然后运行这行命令来创建一个应用：</p><pre><code>py manage.py startapp todolist</code></pre><p>在to_do_list文件夹中找到settings.py</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/1.png"></p><p>用你是用的编译器打开之后找到INSTALLED_APPS，这是一个列表，我们只需要在最后把APP的名字添加进去即可。</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/2.png"> </p><p>在todolist文件夹下新建一个文件夹template用于做网页</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/5.png"> </p><p>在templates下新建文件home.html</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/6.png"> </p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/7.png"> </p><p>我们可以看一下整个项目的结构</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/3.png"> </p><p>我们先转到to_do_list下的urls.py</p><p>这个urls.py的作用就是我们在浏览器上输入网址的时候，该网址就会和这里面的path路径匹配，和谁匹配成功，就交给谁处理。</p><p>在todolist下新建 urls.py</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/8.png"> </p><p>我们在urlpatterns下加入</p><pre class=" language-python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'todo/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>todolist<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/4.png"> </p><p>这个时候我们再看看todolist.urls，说明我们要将home传到名为todolist的app中的urls.py里面，这个urls.py的功能和to_do_list的urls.py的功能其实是一样的，就是匹配然后进行下一步操作。</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/9.png"></p><h4 id="使用bootstrap模板"><a href="#使用bootstrap模板" class="headerlink" title="使用bootstrap模板"></a>使用bootstrap模板</h4><p>打开网站getbootstrap.com</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/10.png"> </p><p>点进去，右键查看源代码，全选复制，粘贴到home.html中</p><p>bootstrap国内cdn</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cdn.bootcss.com/bootstrap/4.1.1/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>将此粘贴到<img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/11.png"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/bootstrap/4.1.1/js/bootstrap.bundle.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>></code></pre><p>将此粘贴到</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/13.png"></p><p>删除以下部分</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/14.png"></p><h4 id="修改导航栏"><a href="#修改导航栏" class="headerlink" title="修改导航栏"></a>修改导航栏</h4><p>修改网页标签名字</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/15.png"> </p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/16.png"> </p><p>删除不必要的成分</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/17.png"> </p><p>留下link，其余都删除</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/18.png"></p><p>将link复制两份</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/19.png"> </p><p>将两个link分别改为  ToDoList 和 About </p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/20.png">  </p><p> 将ToDoList设置为默认高亮(active)</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/21.png"></p><h4 id="调整导航栏"><a href="#调整导航栏" class="headerlink" title="调整导航栏"></a>调整导航栏</h4><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/22.png"> </p><p>将此删除</p><p>加入style标签，并且加上id“topnav”</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/23.png"> </p><p>对ID为topnav的nav添加格式（选择ID使用 # ）</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/24.png"> </p><p>将右边的 搜索 改为我们想要的 添加</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/25.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/26.png"></p><p>这个时候主页架构基本完成了</p><h4 id="调整主页"><a href="#调整主页" class="headerlink" title="调整主页"></a>调整主页</h4><p>下面我们到bootstrap中使用已经写好的表格样式</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/27.png"> </p><p>复制以下代码</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/28.png"></p><p>粘贴到main部分</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/29.png"> </p><p>在style下加上两个自定义的class</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/30.png"> </p><p>下面我们来根据需求修改main部分</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/31.png"> </p><h4 id="编辑副网页"><a href="#编辑副网页" class="headerlink" title="编辑副网页"></a>编辑副网页</h4><p>接下来我们先创建另外两个网页 About 和Edit</p><p>一个用于介绍本网页的用意，一个用于编辑你的待办清单</p><p>在templates晚间加下新建两个html文件，将home中的代码复制进去</p><p>把 &lt; title&gt;和&lt; main&gt;</p><p>中的部分修改即可</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/32.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/33.png"></p><p>（About中导航栏的高亮也要修改一下）</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/40.png"></p><p>（Edit中导航栏的高亮也要修改一下，删除 active）</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/42.png"> </p><p>在edit中，我们还要在&lt; style&gt;下再自定义一个class</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/34.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/35.png"></p><p>到此 前端部分基本完成</p><hr><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>首先我们先在templates文件夹下新建一个名为todolist的文件夹，将之前的三个网页放进去（目的是避免网页重名）</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/36.png"> </p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/37.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/38.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/39.png"></p><p>同理，我们在About界面点击Todolist也要能跳转</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/41.png"></p><p>同理，我们在Edit界面点击ToDoList 和 About也要能跳转</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/43.png"></p><p>在home中点击Edit也要能跳转到Edit界面</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/44.png"></p><h3 id="前端2"><a href="#前端2" class="headerlink" title="前端2"></a>前端2</h3><h4 id="“添加”功能"><a href="#“添加”功能" class="headerlink" title="“添加”功能"></a>“添加”功能</h4><p>首先，我们先将主页中的四个待办事项注释掉</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/45.png"></p><p>处理Add中的内容，使其发送到主页（修改home.html 中的内容）</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/46.png"></p><p>在 view中 先学习使用列表和字典来存储数据</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/53.png"></p><p>下面在home中调用</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/54.png"></p><p>判断是否已完成</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/55.png"></p><p>在home中 添加判断</p><p>将这里剪切到上面的if中去</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/56.png"></p><p>稍加修改</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/57.png"></p><h4 id="“删除”功能"><a href="#“删除”功能" class="headerlink" title="“删除”功能"></a>“删除”功能</h4><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/58.png"></p><p>在urls中添加</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/59.png"></p><p>判断用户删除的是哪一项</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/60.png"></p><p>注意 只有在html文件中forloop.counter 中间是“.” 其余都是“_”</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/61.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/62.png"></p><h4 id="“编辑”功能"><a href="#“编辑”功能" class="headerlink" title="“编辑”功能"></a>“编辑”功能</h4><p>判断用户编辑的是哪一项</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/63.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/64.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/65.png"></p><p>在edit.html 中</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/66.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/67.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/68.png"></p><p>再在edit中添加一个 当输入为空时的警告</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/69.png"></p><h4 id="“划掉、撤销”功能"><a href="#“划掉、撤销”功能" class="headerlink" title="“划掉、撤销”功能"></a>“划掉、撤销”功能</h4><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/70.png"></p><p>添加“划掉”的网址</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/72.png"></p><p>在views中添加 “划掉”</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/73.png"></p><h4 id="添加为空的警告弹窗"><a href="#添加为空的警告弹窗" class="headerlink" title="添加为空的警告弹窗"></a>添加为空的警告弹窗</h4><p>首先修复一下添加为空后的内容</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/74.png"></p><p>然后到bootstrap官网复制以下代码</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/75.png"></p><p>替换到这个位置 删除上面的&lt; br&gt;</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/76.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/77.png"></p><p>在此输入你要警告的内容（&lt; center&gt;标签为居中）</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/78.png"></p><p>将其放入判断中</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/79.png"></p><p>在html的文末使用国内CDN</p><h4 id="添加成功的弹窗"><a href="#添加成功的弹窗" class="headerlink" title="添加成功的弹窗"></a>添加成功的弹窗</h4><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/80.png"></p><p>将原cdn更改为bootstrap官网的cdn</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/81.png"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.4.1.slim.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="细化“删除功能”的判断弹窗"><a href="#细化“删除功能”的判断弹窗" class="headerlink" title="细化“删除功能”的判断弹窗"></a>细化“删除功能”的判断弹窗</h4><p>到bootstrap官网找到以下内容</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/82.png"></p><p>粘贴到 “未完成”的删除部分，并加以修改成你需要的内容</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/83.png"></p><p>将&lt; form&gt;标签剪切到下面</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/84.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/85.png"></p><p>将submit改成button</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/86.png"></p><p>删除以下部分</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/87.png"></p><p>修改以下部分</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/88.png"></p><p>到这里，我们的网站就基本完成了</p><hr><h3 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h3><p>一旦关掉服务器，用户所有的数据都将不在，所以我们要用到数据库</p><p>创建Model类，用来描述表的构成（面向网站开发者）</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/89.png"></p><p>makemigrations ：制作迁移文件</p><p>在命令行中输入 py manage.py makemigrations</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/90.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/91.png"></p><p>django 会利用这个文件来建表改表（面向数据库管理员）</p><p>每次新增一个model 都要重新 makemigrations</p><p>输入下列命令建表</p><pre class=" language-python"><code class="language-python">py manage<span class="token punctuation">.</span>py migrate</code></pre><p>进入命令行，使用python模式</p><pre class=" language-python"><code class="language-python">python manage<span class="token punctuation">.</span>py shell</code></pre><p>将model导进去</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> todolist<span class="token punctuation">.</span>models <span class="token keyword">import</span> Todo</code></pre><p>QuerySet 查询集合</p><pre class=" language-python"><code class="language-python">Todo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">a_row <span class="token operator">=</span> Todo<span class="token punctuation">(</span>thing<span class="token operator">=</span><span class="token string">'看电影'</span><span class="token punctuation">,</span> dones<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>a_row<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/92.png"></p><pre class=" language-python"><code class="language-python">a_row <span class="token operator">=</span> Todo<span class="token punctuation">(</span>thing<span class="token operator">=</span><span class="token string">'逛街'</span><span class="token punctuation">,</span> dones<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>a_row<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><p>修改：</p><pre class=" language-python"><code class="language-python">another_row<span class="token punctuation">.</span>thing <span class="token operator">=</span> <span class="token string">'去超市'</span></code></pre><p>在view.py中导入model   并删除列表</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/93.png"></p><p>并做以下修改</p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/96.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/94.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/95.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/97.png"></p><h4 id="修改“删除”功能"><a href="#修改“删除”功能" class="headerlink" title="修改“删除”功能"></a>修改“删除”功能</h4><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/98.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/99.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/100.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/101.png"></p><h4 id="修改“划掉”、“撤销”功能"><a href="#修改“划掉”、“撤销”功能" class="headerlink" title="修改“划掉”、“撤销”功能"></a>修改“划掉”、“撤销”功能</h4><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/102.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/103.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/104.png"></p><h4 id="修改“编辑”功能"><a href="#修改“编辑”功能" class="headerlink" title="修改“编辑”功能"></a>修改“编辑”功能</h4><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/105.png"></p><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/106.png"></p><h4 id="修改一个小bug"><a href="#修改一个小bug" class="headerlink" title="修改一个小bug"></a>修改一个小bug</h4><p><img src="/images/python%E7%A4%BE%E5%8C%BA%E6%90%AD%E5%BB%BA/107.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
            <tag> html </tag>
            
            <tag> 前端 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
